{{>licenseInfo}}

package {{package}};

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
{{#imports}}import {{import}};
{{/imports}}

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import {{invokerPackage}}.JSON;

/**
 * {{description}}{{^description}}{{classname}}{{/description}}
 */
{{#discriminator}}{{>typeInfoAnnotation}}{{/discriminator}}
{{>generatedAnnotation}}
public record {{classname}}(
{{#vars}}
  {{#description}}
  /**
   * {{{.}}}
   */
  {{/description}}
  @SerializedName(SERIALIZED_NAME_{{nameInSnakeCase}})
  {{#required}}@javax.annotation.Nonnull{{/required}}{{^required}}@javax.annotation.Nullable{{/required}}
  {{dataType}} {{name}}{{#hasMore}},{{/hasMore}}
{{/vars}}
) {
  {{#vars}}
  public static final String SERIALIZED_NAME_{{nameInSnakeCase}} = "{{baseName}}";
  {{/vars}}

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#vars}}
    sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    {{#vars}}
    openapiFields.add("{{baseName}}");
    {{/vars}}

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    {{#requiredVars}}
    openapiRequiredFields.add("{{baseName}}");
    {{/requiredVars}}
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to {{classname}}
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!{{classname}}.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in {{classname}} is not found in the empty JSON string", {{classname}}.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!{{classname}}.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `{{classname}}` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
      {{#vars}}
      {{#isString}}
      JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("{{baseName}}") != null && !jsonObj.get("{{baseName}}").isJsonNull()) && !jsonObj.get("{{baseName}}").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `{{baseName}}` to be a primitive type in the JSON string but got `%s`", jsonObj.get("{{baseName}}").toString()));
      }
      {{/isString}}
      {{/vars}}
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!{{classname}}.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes '{{classname}}' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<{{classname}}> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get({{classname}}.class));

       return (TypeAdapter<T>) new TypeAdapter<{{classname}}>() {
           @Override
           public void write(JsonWriter out, {{classname}} value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public {{classname}} read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of {{classname}} given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of {{classname}}
   * @throws IOException if the JSON string is invalid with respect to {{classname}}
   */
  public static {{classname}} fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, {{classname}}.class);
  }

  /**
   * Convert an instance of {{classname}} to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}